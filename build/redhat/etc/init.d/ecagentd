#!/bin/bash 
# ec_agent        Init script for running the ecm_agent client daemon
#
# Author:       Juan Carlos Moreno <juancarlos.moreno@ecmanaged.com>
#               Gonzalo Radio <gonzalo.radio@ackstorm.com>
#               Arindam Choudhury <arindam@live.com>
#
# chkconfig: - 85 20
#
# description: Enables ECManaged Agent for monitoring and deployment
# processname: ecm_agent
# config: /etc/sysconfig/ecm_agent

set +e

NAME=${NAME:-ecagentd}
TWISTD=${TWISTD:-/usr/bin/twistd}
TAC=${TAC:-"$NAME.tac"}
DESC=${DESC:-"ECM Agent"}
DIR=${DIR:-/opt/ecmanaged/ecagent}
PID_FILE=${PID_FILE:-"$DIR/twistd.pid"}
RETRY=${RETRY:-15}
LOCKFILE=${LOCKFILE:-"$DIR/$NAME.lock"}
RETVAL=0
MIN_DISK=1000

test -x $TWISTD || exit 0

#export LANG="C"
#export PATH="${PATH:-$PATH}:/usr/sbin:/sbin"

# clean related environment when started from cloud-init
# bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=439763

unset PERL_DL_NONLAZY

# Source function library.
. /etc/rc.d/init.d/functions

# Determine if we can use the -p option to daemon, killproc, and status.
# RHEL < 5 can't.
if status | grep -q -- '-p' 2>/dev/null; then
    daemonopts="--pidfile $PID_FILE"
    pidopts="-p $PID_FILE"
fi

# Check working dir
if test ! -d "$DIR"; then
  echo "Unable to access work dir: $DIR"
  exit 1;
fi

# Run in work directory
cd $DIR

# Figure out if the system just booted. Let's assume
# boot doesn't take longer than 5 minutes
## Not used for now
##[ -n "$INIT_VERSION" ] && ECAGENT_OPTS="${ECAGENT_OPTS} --fullrun"

start() {
    echo -n $"Starting ${NAME}: "
    check_disk
    /bin/rm -f $PID_FILE > /dev/null 2>&1
    daemon $daemonopts $TWISTD -y $TAC 2>/dev/null
    RETVAL=$?
    echo
    [ $RETVAL = 0 ] && touch ${LOCKFILE}
}

killagent() {
    echo $"Killing ${NAME} "
    PID=$(getpid)
        ls -l /proc/$PID/exe > /dev/null 2>&1
        case "$?" in
                0) kill -9 $PID >/dev/null 2>&1 ;;
                *) ;;
        esac
}

zombies() {     
    PID=$(getpid)
    for i in $(ps axo ppid,state,etimes|grep -w Z|awk '{if ($3 >= 300) print $1 }'); do
        if [ $i -eq ${PID} ]; then
             restart
        fi
    done
}

stop() {
    echo -n $"Stopping ${NAME}: "
    killproc $pidopts
    RETVAL=$?
    echo
    if [ $RETVAL = 0 ]; then
        rm -f ${LOCKFILE} ${PID_FILE}
    else
        killagent
    fi
}

check() {
    echo -n $"Checking status of ${NAME}: "
    PID=$(getpid)
    ls -l /proc/$PID/exe > /dev/null 2>&1
    case "$?" in
        0) zombies; echo 'OK' ;;
        *) echo 'KO'; stop; start ;;
    esac
}

check_disk() {
    USED_SPACE=`df -H -k $DIR | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{ print $3 }'`
    FREE_SPACE=`df -H -k $DIR | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{ print $4 }'`
    if [ ${USED_SPACE} -gt 1 ] && [ ${FREE_SPACE} -lt ${MIN_DISK} ]; then
        echo " Not starting, sorry. No enough free space on ${DIR}"
        exit 1
    fi
}

restart() {
    stop
    start
}

getpid() {
    echo `cat $PID_FILE 2>/dev/null`
}

case "$1" in
    start)
        start
    ;;
    stop)
        stop
    ;;
    restart)
        restart
    ;;
    check)
        check
    ;;
    kill)
        killagent
    ;;
    *)
        echo $"Usage: $0 {start|stop|restart|check|kill}"
        exit 1
esac

exit $RETVAL
